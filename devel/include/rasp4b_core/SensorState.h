// Generated by gencpp from file rasp4b_core/SensorState.msg
// DO NOT EDIT!


#ifndef RASP4B_CORE_MESSAGE_SENSORSTATE_H
#define RASP4B_CORE_MESSAGE_SENSORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rasp4b_core
{
template <class ContainerAllocator>
struct SensorState_
{
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
    : motor_id(0)
    , current(0)
    , velocity(0)
    , position(0)
    , acclX_scaled(0)
    , acclY_scaled(0)
    , acclZ_scaled(0)
    , gyroX_scaled(0)
    , gyroY_scaled(0)
    , gyroZ_scaled(0)  {
    }
  SensorState_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , current(0)
    , velocity(0)
    , position(0)
    , acclX_scaled(0)
    , acclY_scaled(0)
    , acclZ_scaled(0)
    , gyroX_scaled(0)
    , gyroY_scaled(0)
    , gyroZ_scaled(0)  {
  (void)_alloc;
    }



   typedef uint8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef int16_t _current_type;
  _current_type current;

   typedef int16_t _velocity_type;
  _velocity_type velocity;

   typedef int16_t _position_type;
  _position_type position;

   typedef int16_t _acclX_scaled_type;
  _acclX_scaled_type acclX_scaled;

   typedef int16_t _acclY_scaled_type;
  _acclY_scaled_type acclY_scaled;

   typedef int16_t _acclZ_scaled_type;
  _acclZ_scaled_type acclZ_scaled;

   typedef int16_t _gyroX_scaled_type;
  _gyroX_scaled_type gyroX_scaled;

   typedef int16_t _gyroY_scaled_type;
  _gyroY_scaled_type gyroY_scaled;

   typedef int16_t _gyroZ_scaled_type;
  _gyroZ_scaled_type gyroZ_scaled;





  typedef boost::shared_ptr< ::rasp4b_core::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rasp4b_core::SensorState_<ContainerAllocator> const> ConstPtr;

}; // struct SensorState_

typedef ::rasp4b_core::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::rasp4b_core::SensorState > SensorStatePtr;
typedef boost::shared_ptr< ::rasp4b_core::SensorState const> SensorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rasp4b_core::SensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rasp4b_core::SensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rasp4b_core

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rasp4b_core': ['/home/pi/code/loui_robot_rasp4b_ws/src/rasp4b_core/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rasp4b_core::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rasp4b_core::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rasp4b_core::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rasp4b_core::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rasp4b_core::SensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rasp4b_core::SensorState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rasp4b_core::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af96eca82971ebfe9bcfd9370b30adab";
  }

  static const char* value(const ::rasp4b_core::SensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf96eca82971ebfeULL;
  static const uint64_t static_value2 = 0x9bcfd9370b30adabULL;
};

template<class ContainerAllocator>
struct DataType< ::rasp4b_core::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rasp4b_core/SensorState";
  }

  static const char* value(const ::rasp4b_core::SensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rasp4b_core::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 motor_id\n\
int16 current\n\
int16 velocity\n\
int16 position\n\
int16 acclX_scaled\n\
int16 acclY_scaled\n\
int16 acclZ_scaled\n\
int16 gyroX_scaled\n\
int16 gyroY_scaled\n\
int16 gyroZ_scaled\n\
#double acclX_scaled\n\
#double acclY_scaled\n\
#double acclZ_scaled\n\
#double gyroX_scaled\n\
#double gyroY_scaled\n\
#double gyroZ_scaled\n\
\n\
";
  }

  static const char* value(const ::rasp4b_core::SensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rasp4b_core::SensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.current);
      stream.next(m.velocity);
      stream.next(m.position);
      stream.next(m.acclX_scaled);
      stream.next(m.acclY_scaled);
      stream.next(m.acclZ_scaled);
      stream.next(m.gyroX_scaled);
      stream.next(m.gyroY_scaled);
      stream.next(m.gyroZ_scaled);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rasp4b_core::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rasp4b_core::SensorState_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "current: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current);
    s << indent << "velocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.velocity);
    s << indent << "position: ";
    Printer<int16_t>::stream(s, indent + "  ", v.position);
    s << indent << "acclX_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acclX_scaled);
    s << indent << "acclY_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acclY_scaled);
    s << indent << "acclZ_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.acclZ_scaled);
    s << indent << "gyroX_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroX_scaled);
    s << indent << "gyroY_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroY_scaled);
    s << indent << "gyroZ_scaled: ";
    Printer<int16_t>::stream(s, indent + "  ", v.gyroZ_scaled);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RASP4B_CORE_MESSAGE_SENSORSTATE_H
